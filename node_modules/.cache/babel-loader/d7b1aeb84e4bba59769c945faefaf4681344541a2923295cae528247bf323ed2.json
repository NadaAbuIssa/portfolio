{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { Vector3, Color, Object3D } from 'three';\nconst Sampler = _ref => {\n  let {\n    children,\n    weight,\n    transform,\n    instances,\n    mesh,\n    ...props\n  } = _ref;\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  React.useEffect(() => {\n    if (typeof meshToSampleRef.current === 'undefined') return;\n    if (typeof instancedRef.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(meshToSampleRef.current);\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    meshToSampleRef.current.updateMatrixWorld(true);\n    for (let i = 0; i < instancedRef.current.count; i++) {\n      sampler.sample(position, normal, color);\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: meshToSampleRef.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n      dummy.updateMatrix();\n      instancedRef.current.setMatrixAt(i, dummy.matrix);\n    }\n    instancedRef.current.instanceMatrix.needsUpdate = true;\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n};\nexport { Sampler };","map":{"version":3,"names":["_extends","React","MeshSurfaceSampler","Vector3","Color","Object3D","Sampler","_ref","children","weight","transform","instances","mesh","props","group","useRef","instancedRef","meshToSampleRef","useEffect","_instances$current","_mesh$current","current","find","c","hasOwnProperty","type","sampler","setWeightAttribute","build","position","normal","color","dummy","updateMatrixWorld","i","count","sample","sampledMesh","copy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","createElement","ref"],"sources":["/home/nadaabuissa/Downloads/Computer/node_modules/@react-three/drei/core/Sampler.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { Vector3, Color, Object3D } from 'three';\n\nconst Sampler = ({\n  children,\n  weight,\n  transform,\n  instances,\n  mesh,\n  ...props\n}) => {\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  React.useEffect(() => {\n    if (typeof meshToSampleRef.current === 'undefined') return;\n    if (typeof instancedRef.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(meshToSampleRef.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    meshToSampleRef.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < instancedRef.current.count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: meshToSampleRef.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n      instancedRef.current.setMatrixAt(i, dummy.matrix);\n    }\n\n    instancedRef.current.instanceMatrix.needsUpdate = true;\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n};\n\nexport { Sampler };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}