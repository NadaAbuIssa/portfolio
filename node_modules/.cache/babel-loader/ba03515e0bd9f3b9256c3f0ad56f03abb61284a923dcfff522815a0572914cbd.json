{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    scale = 10,\n    frames = Infinity,\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 512,\n    smooth = true,\n    color = '#000000',\n    depthWrite = false,\n    renderOrder,\n    ...props\n  } = _ref;\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = {\n        ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`,\n      //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","_ref","ref","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","depthWrite","renderOrder","props","scene","state","gl","shadowCamera","useRef","Array","isArray","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneBufferGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","onBeforeCompile","shader","uniforms","ucolor","value","Color","convertSRGBToLinear","fragmentShader","replace","ShaderMaterial","blurShadows","visible","material","tDiffuse","h","setRenderTarget","render","current","v","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","createElement","geometry","rotation","map","outputEncoding","transparent","args"],"sources":["/home/nadaabuissa/Downloads/Computer/node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}